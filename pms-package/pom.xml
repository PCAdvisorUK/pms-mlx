<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<artifactId>pms-package</artifactId>

	<parent>
		<groupId>net.pms</groupId>
		<artifactId>pms-global</artifactId>
		<version>1.52.1_mlx_v0.7-SNAPSHOT</version>
	</parent>

	<properties>
		<pms-target>../ps3mediaserver/target</pms-target>
		<project.binaries>../ps3mediaserver/target/bin</project.binaries>
		<!-- Snapshots should get their binaries from the trunk, releases from a tag -->
		<project.binaries-base>http://ps3mediaserver.googlecode.com/svn/trunk/ps3mediaserver</project.binaries-base>
		<!-- <project.binaries-base>http://ps3mediaserver.googlecode.com/svn/tags/1.40.0</project.binaries-base> -->
		<maven.nsis.project.template>${project.basedir}/src/main/external-resources/nsis/project.jelly</maven.nsis.project.template>
		<project.external-resources>${project.basedir}/src/main/external-resources</project.external-resources>
	</properties>

	<dependencies>
		<!-- maven replacement for nsisant-1.2.jar -->
		<dependency>
			<groupId>maven</groupId>
			<artifactId>maven-nsis-plugin</artifactId>
			<version>2.1</version>
		</dependency>
		<dependency>
			<groupId>net.pms</groupId>
			<artifactId>pms</artifactId>
			<version>1.52.1_mlx_v0.7-SNAPSHOT</version>
		</dependency>
	</dependencies>

	<profiles>
		<!-- Windows profile: takes care of building the final package for Microsoft Windows -->
		<profile>
			<id>windows</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<os>
					<family>windows</family>
				</os>
			</activation>


			<pluginRepositories>
				<pluginRepository>
					<id>Codehaus Snapshots</id>
					<url>http://nexus.codehaus.org/snapshots/</url>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
					<releases>
						<enabled>true</enabled>
					</releases>
				</pluginRepository>
			</pluginRepositories>

			<build>
				<plugins>

					<!-- Plugin to move the pms-x.x.x-jar-with-dependencies.jar to pms.jar -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>process-resources-windows</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the download folders exist -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/win32" />
										<mkdir dir="${project.binaries}/win32/codecs" />
										<mkdir dir="${project.binaries}/win32/dvrms" />
										<mkdir dir="${project.binaries}/win32/fonts" />
										<mkdir dir="${project.binaries}/win32/fonts/conf.avail" />
										<mkdir dir="${project.binaries}/win32/fonts/conf.d" />
										<mkdir dir="${project.binaries}/win32/fonts" />
										<mkdir dir="${project.binaries}/win32/mplayer" />
										<mkdir dir="${project.binaries}/win32/service" />

										<!-- Download all necessary Windows binaries. Keep the same structure because NSIS expects it that way. -->
										<get src="${project.binaries-base}/MediaInfo.dll" dest="${project.binaries}/MediaInfo.dll"
											usetimestamp="true" />
										<get src="${project.binaries-base}/MediaInfo64.dll" dest="${project.binaries}/MediaInfo64.dll"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/Convert_License.txt"
											dest="${project.binaries}/win32/Convert_License.txt"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/LICENSE.txt"
											dest="${project.binaries}/win32/LICENSE.txt" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/builds.txt" dest="${project.binaries}/win32/builds.txt"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/convert.exe"
											dest="${project.binaries}/win32/convert.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/dcrawMS.exe"
											dest="${project.binaries}/win32/dcrawMS.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/ffmpeg.exe" dest="${project.binaries}/win32/ffmpeg.exe"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/flac.exe" dest="${project.binaries}/win32/flac.exe"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mencoder.exe"
											dest="${project.binaries}/win32/mencoder.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer.exe"
											dest="${project.binaries}/win32/mplayer.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/pthreadGC2.dll"
											dest="${project.binaries}/win32/pthreadGC2.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/tsMuxeR.exe"
											dest="${project.binaries}/win32/tsMuxeR.exe" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/vcomp100.dll"
											dest="${project.binaries}/win32/vcomp100.dll" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drv33260.dll"
											dest="${project.binaries}/win32/codecs/drv33260.dll"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/drv43260.dll"
											dest="${project.binaries}/win32/codecs/drv43260.dll"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/pncrt.dll"
											dest="${project.binaries}/win32/codecs/pncrt.dll"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/sipr3260.dll"
											dest="${project.binaries}/win32/codecs/sipr3260.dll"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/tokr3260.dll"
											dest="${project.binaries}/win32/codecs/tokr3260.dll"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wma9dmod.dll"
											dest="${project.binaries}/win32/codecs/wma9dmod.dll"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wmv9dmod.dll"
											dest="${project.binaries}/win32/codecs/wmv9dmod.dll"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/codecs/wmvdmod.dll"
											dest="${project.binaries}/win32/codecs/wmvdmod.dll"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/dvrms/ffmpeg_MPGMUX.exe"
											dest="${project.binaries}/win32/dvrms/ffmpeg_MPGMUX.exe"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/dvrms/pthreadGC2.dll"
											dest="${project.binaries}/win32/dvrms/pthreadGC2.dll"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/fonts.conf"
											dest="${project.binaries}/win32/fonts/fonts.conf"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/fonts.dtd"
											dest="${project.binaries}/win32/fonts/fonts.dtd"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/10-autohint.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/10-autohint.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/10-no-sub-pixel.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/10-no-sub-pixel.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/10-sub-pixel-bgr.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/10-sub-pixel-bgr.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/10-sub-pixel-rgb.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/10-sub-pixel-rgb.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/10-sub-pixel-vbgr.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/10-sub-pixel-vbgr.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/10-sub-pixel-vrgb.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/10-sub-pixel-vrgb.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/10-unhinted.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/10-unhinted.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/20-fix-globaladvance.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/20-fix-globaladvance.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/20-unhint-small-vera.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/20-unhint-small-vera.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/25-unhint-nonlatin.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/25-unhint-nonlatin.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/30-metric-aliases.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/30-metric-aliases.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/30-urw-aliases.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/30-urw-aliases.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/40-nonlatin.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/40-nonlatin.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/45-latin.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/45-latin.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/49-sansserif.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/49-sansserif.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/50-user.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/50-user.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/51-local.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/51-local.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/60-latin.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/60-latin.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/65-fonts-persian.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/65-fonts-persian.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/65-khmer.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/65-khmer.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/65-nonlatin.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/65-nonlatin.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/69-unifont.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/69-unifont.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/70-no-bitmaps.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/70-no-bitmaps.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/70-yes-bitmaps.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/70-yes-bitmaps.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/80-delicious.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/80-delicious.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.avail/90-synthetic.conf"
											dest="${project.binaries}/win32/fonts/conf.avail/90-synthetic.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/20-fix-globaladvance.conf"
											dest="${project.binaries}/win32/fonts/conf.d/20-fix-globaladvance.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/20-unhint-small-vera.conf"
											dest="${project.binaries}/win32/fonts/conf.d/20-unhint-small-vera.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/30-metric-aliases.conf"
											dest="${project.binaries}/win32/fonts/conf.d/30-metric-aliases.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/30-urw-aliases.conf"
											dest="${project.binaries}/win32/fonts/conf.d/30-urw-aliases.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/40-nonlatin.conf"
											dest="${project.binaries}/win32/fonts/conf.d/40-nonlatin.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/45-latin.conf"
											dest="${project.binaries}/win32/fonts/conf.d/45-latin.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/49-sansserif.conf"
											dest="${project.binaries}/win32/fonts/conf.d/49-sansserif.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/50-user.conf"
											dest="${project.binaries}/win32/fonts/conf.d/50-user.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/51-local.conf"
											dest="${project.binaries}/win32/fonts/conf.d/51-local.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/60-latin.conf"
											dest="${project.binaries}/win32/fonts/conf.d/60-latin.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/65-fonts-persian.conf"
											dest="${project.binaries}/win32/fonts/conf.d/65-fonts-persian.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/65-nonlatin.conf"
											dest="${project.binaries}/win32/fonts/conf.d/65-nonlatin.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/69-unifont.conf"
											dest="${project.binaries}/win32/fonts/conf.d/69-unifont.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/80-delicious.conf"
											dest="${project.binaries}/win32/fonts/conf.d/80-delicious.conf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/fonts/conf.d/90-synthetic.conf"
											dest="${project.binaries}/win32/fonts/conf.d/90-synthetic.conf"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/fonts/conf.d/README"
											dest="${project.binaries}/win32/fonts/conf.d/README"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/config"
											dest="${project.binaries}/win32/mplayer/config" usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/input.conf"
											dest="${project.binaries}/win32/mplayer/input.conf"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/mplayer/subfont.ttf"
											dest="${project.binaries}/win32/mplayer/subfont.ttf"
											usetimestamp="true" />
										<get
											src="${project.binaries-base}/win32/service/wrapper-community-license-1.1.txt"
											dest="${project.binaries}/win32/service/wrapper-community-license-1.1.txt"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper.conf"
											dest="${project.binaries}/win32/service/wrapper.conf"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper.dll"
											dest="${project.binaries}/win32/service/wrapper.dll"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper.exe"
											dest="${project.binaries}/win32/service/wrapper.exe"
											usetimestamp="true" />
										<get src="${project.binaries-base}/win32/service/wrapper.jar"
											dest="${project.binaries}/win32/service/wrapper.jar"
											usetimestamp="true" />
									</target>
								</configuration>
							</execution>
							<execution>
								<id>prepare-package-windows</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Copy the pms-x.x.x-jar-with-dependencies.jar to pms.jar -->
										<copy
											file="${pms-target}/pms-${project.version}-jar-with-dependencies.jar"
											tofile="${project.basedir}/target/pms.jar" overwrite="true" />

										<!-- MediaInfo library needs to be in the standard library path 
											to be found -->
										<copy file="${project.binaries}/MediaInfo.dll" todir="${project.basedir}" />
										<copy file="${project.binaries}/MediaInfo64.dll" todir="${project.basedir}" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Plugin to build a Windows installer using the nullsoft scriptable 
						install system (NSIS) The "generate-project" goal generates a file "target/project.nsh", 
						which contains the definitions for project variables like "${PROJECT_BASEDIR}" 
						that can be used in the "pms.nsi" and "setup.nsi" files. -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>nsis-maven-plugin</artifactId>
						<version>1.0-SNAPSHOT</version>
						<executions>
							<execution>
								<id>build-pms-windows</id>
								<configuration>
									<makensisBin>${project.external-resources}/third-party/nsis/makensis.exe</makensisBin>
									<outputFile>${project.build.directory}/PMS.exe</outputFile>
									<setupScript>${project.external-resources}/nsis/pms.nsi</setupScript>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>generate-project</goal>
									<goal>compile</goal>
								</goals>
							</execution>

							<execution>
								<id>build-setup-windows</id>
								<configuration>
									<makensisBin>${project.external-resources}/third-party/nsis/makensis.exe</makensisBin>
									<outputFile>${project.build.directory}/PMS-setup.exe</outputFile>
									<setupScript>${project.external-resources}/nsis/setup.nsi</setupScript>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>generate-project</goal>
									<goal>compile</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>


		<!-- Linux profile: takes care of building the final package for Linux -->
		<profile>
			<id>linux</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<os>
					<family>unix</family>
				</os>
			</activation>

			<build>
				<plugins>
					<!-- Plugin to copy the pms-x.x.x-jar-with-dependencies.jar to pms.jar -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>process-resources-linux</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/linux/tsMuxeR" dest="${project.binaries}/tsMuxeR"
											usetimestamp="true" />
									</target>
								</configuration>
							</execution>

							<execution>
								<id>copy-jar-with-dependencies-linux</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy
											file="${pms-target}/pms-${project.version}-jar-with-dependencies.jar"
											tofile="${project.basedir}/target/pms.jar" overwrite="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Plugin to assemble the PMS distribution file. -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<executions>
							<execution>
								<id>build-pms-linux</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-linux.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>


		<!-- Mac OSX profile: takes care of building the final package for Mac OSX -->
		<profile>
			<id>osx</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<os>
					<family>mac</family>
				</os>
			</activation>
			<build>
				<plugins>

					<!-- Plugin to download binaries before assembly -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>process-resources-osx</id>
								<phase>test</phase>
								<goals>
									<goal>run</goal>
								</goals>

								<configuration>
									<target>
										<!-- Make sure the binaries folder exists -->
										<mkdir dir="${project.binaries}" />
										<mkdir dir="${project.binaries}/osx" />

										<!-- Download binaries -->
										<get src="${project.binaries-base}/osx/dcraw" dest="${project.binaries}/osx/dcraw"
											usetimestamp="true" />
										<get src="${project.binaries-base}/osx/ffmpeg" dest="${project.binaries}/osx/ffmpeg"
											usetimestamp="true" />
										<get src="${project.binaries-base}/osx/flac" dest="${project.binaries}/osx/flac"
											usetimestamp="true" />
										<get src="${project.binaries-base}/osx/libmediainfo.dylib"
											dest="${project.binaries}/libmediainfo.dylib" usetimestamp="true" />
										<get src="${project.binaries-base}/osx/mencoder" dest="${project.binaries}/osx/mencoder"
											usetimestamp="true" />
										<get src="${project.binaries-base}/osx/mplayer" dest="${project.binaries}/osx/mplayer"
											usetimestamp="true" />
										<get src="${project.binaries-base}/osx/tsMuxeR" dest="${project.binaries}/osx/tsMuxeR"
											usetimestamp="true" />

										<!-- MediaInfo library needs to be in the standard library path 
											to be found -->
										<copy file="${project.binaries}/libmediainfo.dylib"
											todir="${project.basedir}" />

										<!-- Make all downloaded binaries executable -->
										<chmod dir="${project.binaries}/osx" perm="a+x"
											includes="*" />

										<copy file="${project.external-resources}/osx/pms.icns"
											todir="${project.binaries}" overwrite="true" />
									</target>
								</configuration>
							</execution>

							<execution>
								<id>prepare-package-osx</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the target folder exists -->
										<mkdir
											dir="${project.build.directory}/${project.build.finalName}-distribution" />

										<!-- Create the shortcut to the Applications folder -->
										<exec executable="/usr/bin/osascript">
											<arg value="-e" />
											<arg value="tell application &quot;Finder&quot;" />
											<arg value="-e" />
											<arg value="set src to POSIX file &quot;/Applications&quot;" />
											<arg value="-e" />
											<arg
												value="set dest to POSIX file &quot;${project.build.directory}/${project.build.finalName}-distribution&quot;" />
											<arg value="-e" />
											<arg value="make new alias file to folder src at folder dest" />
											<arg value="-e" />
											<arg value="end tell" />
										</exec>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Plugin to assemble the PMS files in the right place before creating the App Bundle and DMG disk image. -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<executions>
							<execution>
								<id>make-assembly-osx</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/main/assembly/assembly-osx.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>net.pms.PMS</mainClass>
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Plugin to create the OSX Application Bundle and DMG disk image. 
						This will automatically copy all dependencies to a local repository, so the 
						jar-with-dependencies is not needed here. -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>osxappbundle-maven-plugin</artifactId>
						<version>1.0-alpha-2</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>bundle</goal>
								</goals>
								<configuration>
									<mainClass>net.pms.PMS</mainClass>
									<buildDirectory>${project.build.directory}/${bundle-name}-distribution</buildDirectory>
									<diskImageFile>${project.build.directory}/${bundle-name}.dmg</diskImageFile>
									<zipFile>${project.build.directory}/${bundle-name}-app.zip</zipFile>
									<javaApplicationStub>/System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS/JavaApplicationStub</javaApplicationStub>
									<bundleName>${pms-name}</bundleName>
									<iconFile>${project.external-resources}/osx/pms.icns</iconFile>
									<version>${pms-version}</version>
									<jvmVersion>1.6+</jvmVersion>
									<!-- Options to the JVM, will be used as the value of VMOptions in Info.plist. -->
									<vmOptions>-Xmx1024M -Xss16M -Dsun.java2d.d3d=false
										-Dfile.encoding=UTF-8 -Djava.net.preferIPv4Stack=true -jar</vmOptions>
									<dictionaryFile>${project.external-resources}/osx/Info.plist-template.xml</dictionaryFile>
									<internetEnable>false</internetEnable>
									<additionalResources />
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>